type Query {
  config: Config!
  user(userId: ID!): User!
  users: [User!]!
  post(postId: ID!): Post!
  posts(query: String): [Post!]!
  comments: [Comment!]!
}
type Mutation {
  createUser(user: CreateUserInput!): User!
  deleteUser(userId: ID!): User!
  updateUser(userId: ID!, data: UpdateUserInput!): User!
  createPost(post: CreatePostInput!): Post!
  deletePost(postId: ID!): Post!
  updatePost(postId: ID!, data: UpdatePostInput!): Post!
  createComment(comment: CreateCommentInput!): Comment!
  deleteComment(commentId: ID!): Comment!
  updateComment(commentId: ID!, data: UpdateCommentInput!): Comment!
}
type Subscription {
  comment(postId: ID!): CommentSubcriptionPayload!
  post: PostSubscriptionPayload!
}
input CreateUserInput {
  name: String!
  email: String!
  age: Int
}
input UpdateUserInput {
  name: String
  email: String
  age: Int
}
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}
input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}
input CreateCommentInput {
  text: String!
  authorId: ID!
  postId: ID!
}
input UpdateCommentInput {
  text: String
}
type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type PostSubscriptionPayload {
  mutation: String! # CREATE, UPDATE, DELETE
  data: Post!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
type CommentSubcriptionPayload {
  mutation: String!
  data: Comment!
}
type Config {
  premium: Boolean!
  theme: String!
  font: Int!
}
